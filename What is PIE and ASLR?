What is PIE and ASLR?

ASLR:-
On iOS (and on most other operating systems) ASLR is implemented for both the kernel and the user-land processes. The kernel's ASLR slide is randomised on every reboot. Address space layout randomization (ASLR) is a technique that is used to increase the difficulty of performing a buffer overflow attack that requires the attacker to know the location of an executable in memory. ASLR, on the other hand, randomizes the memory locations of various components, such as the stack, heap, libraries, etc., each time an application is launched or a system component is loaded, making it difficult for attackers to reliably exploit vulnerabilities. It first appeared in iOS 4.3.
ASLR is found in many systems today, including:
Android, DragonFly BSD, FreeBSD, iOS (iPhone, iPod touch, iPad, Linux, Microsoft Windows, NetBSD, OpenBSD.

PIE:-
Position-Independent Executable (PIE) ensures that the executable code can be loaded and executed at any memory address, thus preventing attackers from knowing the exact memory address of functions or code segments in an application.
Steps for building your application as PIE
In Xcode, select your target in the "Targets" section, then click the "Build Settings" tab to view its settings.
For iOS apps, set iOS Deployment Target to iOS 4.3 or later. For Mac apps, set OS X Deployment Target to OS X 10.7 or later.
Verify that Generate Position-Dependent Code is set at its default value of NO.
Verify that Don't Create Position Independent Executables is set at its default value of NO.
Verifying that your application was built as PIE
You can check whether your application is PIE by running otool -hv on your executable in the Terminal. Your application is PIE if its header contains the PIE flag. Listing 1 shows an example of how to do this for an iOS app.
So, by default every app is PIE ASLR Enabled and compiled.

Source for PIE:-
https://developer.apple.com/library/archive/qa/qa1788/_index.html
